import br.com.careman.domain.*
import br.com.careman.groovy.enums.WorkflowType

def contractors = [:]
Contractor.where{alias in ['BANRISUL'] && status == 'ENABLED'}.each{
    def openingHoursGroups = [:]
    it.contract.openingHoursGroup.each { group ->
        openingHoursGroups[group.name] = group
    }
    contractors[it.alias] = [contract:it.contract, openingHoursGroups:openingHoursGroups]
}

def serviceGroups = [:]
ServiceGroup.where{status == 'ENABLED'}.each{
    serviceGroups[it.name] = it
}

def workflows = [:]
WorkflowType.values().each {
    workflows[(it)] = [:]
}
Workflow.where{status == 'ENABLED'}.each{
    workflows[it.workflowType][it.name] = it
}

def serviceLevelAgreementGroups = [:]
ServiceLevelAgreementGroup.where{status == 'ENABLED'}.each{
    serviceLevelAgreementGroups[it.name] = it
}

[
    [contractor:'BANRISUL', services: [
        [
            group:'Instalação',
            workflow:'Instalação',
            allowsCreateEquipmentOnServiceOrder:true,
            onlyEquipmentFromServiceProviderStockOnServiceOrder:true,
            openingHoursGroup:'MON-FRI 08h/18h',
            serviceLevelAgreementGroup:'SLA Banrisul (Instalação e Troca de Tecnologia)',
            name:'Instalação Venda'
        ],

        [
            group:'Desinstalação',
            workflow:'Desinstalação',
            allowsCreateEquipmentOnServiceOrder:true,
            onlyEquipmentFromCustomerAtServiceOrder:true,
            openingHoursGroup:'MON-FRI 08h/18h',
            serviceLevelAgreementGroup:'SLA Banrisul (Instalação e Troca de Tecnologia)',
            name:'Desinstalação'
        ],

        [
            group:'Reconfiguração',
            workflow:'Reconfiguração',
            allowsCreateEquipmentOnServiceOrder:true,
            onlyNewEquipmentFromServiceProviderStockOnServiceOrder:true,
            onlyEquipmentFromCustomerAtServiceOrder:true,
            openingHoursGroup:'MON-FRI 08h/18h',
            serviceLevelAgreementGroup:'SLA Banrisul (Demais Serviços)',
            name:'Reconfiguração'
        ],

        [
            group:'Troca de Tecnologia',
            workflow:'Troca de Tecnologia',
            allowsCreateEquipmentOnServiceOrder:true,
            allowsCreateNewEquipmentOnServiceOrder:true,
            onlyNewEquipmentFromServiceProviderStockOnServiceOrder:true,
            onlyEquipmentFromCustomerAtServiceOrder:true,
            openingHoursGroup:'MON-FRI 08h/18h',
            serviceLevelAgreementGroup:'SLA Banrisul (Instalação e Troca de Tecnologia)',
            name:'Troca de Tecnologia (geral)'
        ],

        [
            group:'Manutenção',
            workflow:'Manutenção',
            allowsCreateEquipmentOnServiceOrder:true,
            onlyNewEquipmentFromServiceProviderStockOnServiceOrder:true,
            onlyEquipmentFromCustomerAtServiceOrder:true,
            openingHoursGroup:'MON-FRI 08h/18h',
            serviceLevelAgreementGroup:'SLA Banrisul (Demais Serviços)',
            name:'Manutenção'
        ],

        [
            group:'Rollout',
            workflow:'Atualização de Software',
            allowsCreateEquipmentOnServiceOrder:true,
            onlyNewEquipmentFromServiceProviderStockOnServiceOrder:true,
            onlyEquipmentFromCustomerAtServiceOrder:true,
            openingHoursGroup:'MON-FRI 08h/18h',
            serviceLevelAgreementGroup:'SLA Ticket (Locação e Instalação)',
            name:'Atualização de Software'
        ],

        [
            group:'Cancelamento',
            workflow:'Cancelamento',
            allowsCreateEquipmentOnServiceOrder:true,
            openingHoursGroup:'MON-FRI 08h/18h',
            serviceLevelAgreementGroup:'SLA Ticket (Locação e Instalação)',
            name:'Cancelamento'
        ]
    ]]

].each {

    def contractInstance = contractors[it.contractor].contract
    it.services.each { service ->

        def openingHoursGroup = contractors[it.contractor].openingHoursGroups[service.openingHoursGroup]
        def serviceGroupInstance = serviceGroups[service.group]
        def workflowInstance = workflows[serviceGroupInstance.workflowType][service.workflow]
        def serviceLevelAgreementGroup = serviceLevelAgreementGroups[service.serviceLevelAgreementGroup]
        def serviceInstance = new ServiceOffered(status: 'ENABLED',
                                            name: service.name,
                                        contract: contractInstance,
                                    serviceGroup: serviceGroupInstance,
                                        workflow: workflowInstance,
                               openingHoursGroup: openingHoursGroup,
                      serviceLevelAgreementGroup: serviceLevelAgreementGroup)

        ['allowsCreateEquipmentOnServiceOrder',
        'allowsCreateNewEquipmentOnServiceOrder',
        'onlyEquipmentFromServiceProviderStockOnServiceOrder',
        'onlyNewEquipmentFromServiceProviderStockOnServiceOrder',
        'onlyEquipmentFromCustomerAtServiceOrder',
        'onlyNewEquipmentFromCustomerAtServiceOrder',
        'generateConsumptionInStock'].each { option ->
            if(service[option]) {
                serviceInstance."${option}" = option
            }
        }
        serviceInstance.save()
        println "${serviceInstance} (${serviceInstance.errors})"
    }
}

/*
    Instalação Venda (grails.validation.ValidationErrors: 0 errors)
    Desinstalação (grails.validation.ValidationErrors: 0 errors)
    Reconfiguração (grails.validation.ValidationErrors: 0 errors)
    Troca de Tecnologia (geral) (grails.validation.ValidationErrors: 0 errors)
    Manutenção (grails.validation.ValidationErrors: 0 errors)
    Atualização de Software (grails.validation.ValidationErrors: 0 errors)
    Cancelamento (grails.validation.ValidationErrors: 0 errors)
*/
