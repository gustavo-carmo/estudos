package careman.unit;

import static org.junit.Assert.assertEquals;

import java.io.IOException;

import org.junit.Test;

import careman.util.FileLoader;

public class FileLoaderTests {

    @Test
    public void testLoadCreateDefect() throws IOException {
        FileLoader loader = new FileLoader();
        String loaded = loader.load("/unit/FileLoader/sampleCreateDefect.txt");

        String expected = "import br.com.careman.domain.*\ndef familyInstance = Family.findWhere(name:\'POS\')\n[\n    [name:\'Terminal Bloqueado\',  solutions:[\'TROCA DE TERMINAL\', \'CONFIGURACAO DO TERMINAL\']],\n    [name:\'Fonte danificada\',    solutions:[\'Trocar Fonte\']]\n].each {\n    def defectInstance = new Defect(status:\'ENABLED\', family:familyInstance, name:it.name)\n    it.solutions.each { solution ->\n        defectInstance.addToSolutions(Solution.findWhere(name:solution))\n    }\n    defectInstance.save()\n    println \"${defectInstance} (${defectInstance.errors})\"\n    println defectInstance.solutions.collect{\"${it.toString()} (${it.errors})\"}.sort().join(\'\\n\')\n}\n// Expected\n/*\n    POS: Terminal Bloqueado (grails.validation.ValidationErrors: 0 errors)\n    CONFIGURACAO DO TERMINAL (grails.validation.ValidationErrors: 0 errors)\n    TROCA DE TERMINAL (grails.validation.ValidationErrors: 0 errors)\n    POS: Fonte danificada (grails.validation.ValidationErrors: 0 errors)\n    Trocar Fonte (grails.validation.ValidationErrors: 0 errors)\n*/";

        assertEquals("failure - strings are not equal", expected, loaded);
    }

    @Test
    public void testLoadCreateGenericContract() throws IOException {
        FileLoader loader = new FileLoader();
        String loaded = loader.load("/unit/FileLoader/sampleCreateGenericContract.txt");

        String expected = "import br.com.careman.domain.*\nimport br.com.careman.groovy.enums.*\ndef stockLevelPlannedStockInDays = AppConfig.findByCode(\'stock.level.a.planned.stock.days\').value as Integer\ndef stockLevelRequestPointDays = AppConfig.findByCode(\'stock.level.b.request.point.days\').value as Integer\ndef stockLevelSafetyStockDays = AppConfig.findByCode(\'stock.level.c.safety.stock.days\').value as Integer\ndef stockLevelBadReturn = AppConfig.findByCode(\'stock.level.d.bad.return\').value as Integer\ndef allOpeningHoursGroups = OpeningHoursGroup.all\ndef openingHoursGroups = [:]\nallOpeningHoursGroups.each {\n    openingHoursGroups[it.name] = it\n}\ndef serviceGroups = [:]\nServiceGroup.where{status == \'ENABLED\'}.each{\n    serviceGroups[it.name] = it\n}\ndef workflows = [:]\nWorkflowType.values().each {\n    workflows[(it)] = [:]\n}\nWorkflow.where{status == \'ENABLED\'}.each{\n    workflows[it.workflowType][it.name] = it\n}\ndef serviceLevelAgreementGroups = [:]\nServiceLevelAgreementGroup.where{status == \'ENABLED\'}.each{\n    serviceLevelAgreementGroups[it.name] = it\n}\n[\n    [name:\'Contrato Generico\', services: [\n        [\n            group:\'Instala\u00e7\u00e3o\',\n            workflow:\'Instala\u00e7\u00e3o\',\n            allowsCreateEquipmentOnServiceOrder:true,\n            onlyEquipmentFromServiceProviderStockOnServiceOrder:true,\n            openingHoursGroup:\'MON-FRI 08h/18h\',\n            serviceLevelAgreementGroup:\'SLA Banrisul (Instala\u00e7\u00e3o e Troca de Tecnologia)\',\n            name:\'Instala\u00e7\u00e3o Venda\'\n        ],\n        [\n            group:\'Desinstala\u00e7\u00e3o\',\n            workflow:\'Desinstala\u00e7\u00e3o\',\n            allowsCreateEquipmentOnServiceOrder:true,\n            onlyEquipmentFromCustomerAtServiceOrder:true,\n            openingHoursGroup:\'MON-FRI 08h/18h\',\n            serviceLevelAgreementGroup:\'SLA Banrisul (Instala\u00e7\u00e3o e Troca de Tecnologia)\',\n            name:\'Desinstala\u00e7\u00e3o\'\n        ],\n        [\n            group:\'Reconfigura\u00e7\u00e3o\',\n            workflow:\'Reconfigura\u00e7\u00e3o\',\n            allowsCreateEquipmentOnServiceOrder:true,\n            onlyNewEquipmentFromServiceProviderStockOnServiceOrder:true,\n            onlyEquipmentFromCustomerAtServiceOrder:true,\n            openingHoursGroup:\'MON-FRI 08h/18h\',\n            serviceLevelAgreementGroup:\'SLA Banrisul (Demais Servi\u00e7os)\',\n            name:\'Reconfigura\u00e7\u00e3o\'\n        ],\n        [\n            group:\'Troca de Tecnologia\',\n            workflow:\'Troca de Tecnologia\',\n            allowsCreateEquipmentOnServiceOrder:true,\n            allowsCreateNewEquipmentOnServiceOrder:true,\n            onlyNewEquipmentFromServiceProviderStockOnServiceOrder:true,\n            onlyEquipmentFromCustomerAtServiceOrder:true,\n            openingHoursGroup:\'MON-FRI 08h/18h\',\n            serviceLevelAgreementGroup:\'SLA Banrisul (Instala\u00e7\u00e3o e Troca de Tecnologia)\',\n            name:\'Troca de Tecnologia (Geral)\'\n        ],\n        [\n            group:\'Manuten\u00e7\u00e3o\',\n            workflow:\'Manuten\u00e7\u00e3o\',\n            allowsCreateEquipmentOnServiceOrder:true,\n            onlyNewEquipmentFromServiceProviderStockOnServiceOrder:true,\n            onlyEquipmentFromCustomerAtServiceOrder:true,\n            openingHoursGroup:\'MON-FRI 08h/18h\',\n            serviceLevelAgreementGroup:\'SLA Banrisul (Demais Servi\u00e7os)\',\n            name:\'Manuten\u00e7\u00e3o\'\n        ],\n        [\n            group:\'Rollout\',\n            workflow:\'Atualiza\u00e7\u00e3o de Software\',\n            allowsCreateEquipmentOnServiceOrder:true,\n            onlyNewEquipmentFromServiceProviderStockOnServiceOrder:true,\n            onlyEquipmentFromCustomerAtServiceOrder:true,\n            openingHoursGroup:\'MON-FRI 08h/18h\',\n            serviceLevelAgreementGroup:\'SLA Ticket (Loca\u00e7\u00e3o e Instala\u00e7\u00e3o)\',\n            name:\'Atualiza\u00e7\u00e3o de Software\'\n        ],\n        [\n            group:\'Cancelamento\',\n            workflow:\'Cancelamento\',\n            allowsCreateEquipmentOnServiceOrder:true,\n            openingHoursGroup:\'MON-FRI 08h/18h\',\n            serviceLevelAgreementGroup:\'SLA Ticket (Loca\u00e7\u00e3o e Instala\u00e7\u00e3o)\',\n            name:\'Cancelamento\'\n        ]\n    ]]\n].each {\n    def contractInstance = new Contract(status: \'ENABLED\',\n                                  contractType: ContractType.GENERIC,\n                                          name: it.name,\n                             openingHoursGroup: allOpeningHoursGroups)\n    contractInstance.save()\n    println \"${contractInstance} (${contractInstance.errors})\"\n    def stockLevelInstance = new StockLevel(contract: contractInstance,\n                   \t\t\t\t  plannedStockInDays: stockLevelPlannedStockInDays,\n\t\t\t\t                    requestPointDays: stockLevelRequestPointDays,\n\t\t\t\t                     safetyStockDays: stockLevelSafetyStockDays,\n\t\t\t\t\t\t                   badReturn: stockLevelBadReturn)\n    stockLevelInstance.save()\n    println \"${stockLevelInstance} (${stockLevelInstance.errors})\"\n    it.services.each { service ->\n        def openingHoursGroup = openingHoursGroups[service.openingHoursGroup]\n        def serviceGroupInstance = serviceGroups[service.group]\n        def workflowInstance = workflows[serviceGroupInstance.workflowType][service.workflow]\n        def serviceLevelAgreementGroup = serviceLevelAgreementGroups[service.serviceLevelAgreementGroup]\n        def serviceInstance = new ServiceOffered(status: \'ENABLED\',\n                                            name: service.name,\n                                        contract: contractInstance,\n                                    serviceGroup: serviceGroupInstance,\n                                        workflow: workflowInstance,\n                               openingHoursGroup: openingHoursGroup,\n                      serviceLevelAgreementGroup: serviceLevelAgreementGroup)\n        [\'allowsCreateEquipmentOnServiceOrder\',\n        \'allowsCreateNewEquipmentOnServiceOrder\',\n        \'onlyEquipmentFromServiceProviderStockOnServiceOrder\',\n        \'onlyNewEquipmentFromServiceProviderStockOnServiceOrder\',\n        \'onlyEquipmentFromCustomerAtServiceOrder\',\n        \'onlyNewEquipmentFromCustomerAtServiceOrder\',\n        \'generateConsumptionInStock\'].each { option ->\n            if(service[option]) {\n                serviceInstance.\"${option}\" = option\n            }\n        }\n        serviceInstance.save()\n        println \"${serviceInstance} (${serviceInstance.errors})\"\n    }\n}";

        assertEquals("failure - strings are not equal", expected, loaded);
    }
}
